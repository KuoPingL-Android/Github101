Git command review
----------------------
You learned four Git commands in the previous lesson.
Each of the four actions on the next screen can be completed using
one of the Git commands you learned.
For each action, type the Git command you would use to complete that action.

Git command review
Compare two commits, printing each line that is present in one commit but not the other.

git diff
It takes two arguments - the two commit ids to compare.


Make a copy of an entire Git repository, including the history,
onto your own computer.

git clone
It takes one argument - the url of the repository
to copy.


Temporarily reset all files in a directory to their state at the time of a specific commit.

git checkout
It takes one argument - the commit ID to restore.


Show the commits made in this repository, starting with the most recent.

git log
It doesn't take any arguments.


=======================
Behavior of git clone *
-----------------------
For each of the statement on the next screen,
select whether it is true if you clone a Git repository,
if you copy a directory that is not being tracked using Git,
or if it is true in both cases.


If someone else gives you the location of their directory or repository,
you can copy or clone it to your own computer.

T for both copying a directory and cloning a repository.

As you saw in the previous lesson, if you have a URL to a repository,
you can copy it to your computer using git clone.

For copying a directory, you weren't expected to know this,
but it is possible to copy a directory from one computer
to another using the command scp, which stands for "secure copy".
The name was chosen because the scp command lets you securely copy a
directory from one computer to another.


The history of changes to the directory or repository is copied.

T for cloning a repository
F for copying a directory.
The main reason to use git clone rather than copying the directory is
because git clone will also copy the commit history of the repository.

However, copying can be done on any directory,
whereas git clone only works on a Git repository.


If you make changes to the copied directory or cloned repository,
the original will not change.

T for both copying a directory and cloning a repository.
In both cases, you're making a copy that you can alter
without changing the original.


The state of every file in the directory or repository is copied.

T for both copying a directory and cloning a repository.
In both cases, all the files are copied.


=======================
Behavior of git log
------------------------
Suppose you ran git log in a repository.
Part of the output is given below.

If you were to run git checkout and examine each of these three commits
in turn, which ones would you expect to contain code for a mute button?

commit 7be5a12f1567866b0d77ccdf2055d1a33831da78
Author: Ellison Leão <el@gmail.com>
Date:   Fri Jul 11 12:56:26 2014 -0300

    Add sound for the wing.

commit 06d72e1f95f046002ec46f41cf71957227111141
Author: Ellison Leão <el@gmail.com>
Date:   Wed Jul 9 23:42:55 2014 -0300

    Add mute button.

commit 3d4d45b246aad6a1cd0afaf7cfae26966110727e
Author: Ellison Leão <el@gmail.com>
Date:   Mon Jul 7 17:35:47 2014 -0300

    Fix leaderboard button



=======================
Behavior of git diff
-----------------------
Consider the same partial git log output as in the previous exercise.
Which arguments would you need to give the git diff command for the
lines of code that implement the mute button to be marked as additions
(with a plus sign)?

To make the options on the next screen easier to read,
only the first 6 characters of each commit ID have been included.
This will not change the output of git diff unless two commits start
with the same 6 characters.

git log output
----------------
commit 7be5a12f1567866b0d77ccdf2055d1a33831da78
Author: Ellison Leão <el@gmail.com>
Date:   Fri Jul 11 12:56:26 2014 -0300

    Add sound for the wing.

commit 06d72e1f95f046002ec46f41cf71957227111141
Author: Ellison Leão <el@gmail.com>
Date:   Wed Jul 9 23:42:55 2014 -0300

    Add mute button.

commit 3d4d45b246aad6a1cd0afaf7cfae26966110727e
Author: Ellison Leão <el@gmail.com>
Date:   Mon Jul 7 17:35:47 2014 -0300

    Fix leaderboard button


For reference, here is the output from git log again:
Select the command that will show mute button as additions :

git diff 3d4d45 06d72e

git diff old new


========================
Behavior of git checkout
---------------------------
On the next screen, check whether each statement is always,
sometimes, or never true about using git checkout to checkout
an earlier commit in a repository with multiple files.

-------------------
Checking out an earlier commit will change the state of at least one file.

Sometimes True.
Git doesn't allow you to save a new commit if no files have been updated,
so you might think this is always true.
However, it's possible to do the following:


1 . Save a commit (call this commit 1).
2 . Update some files and save another commit (call this commit 2).
3 . Change all the files back to their state during commit 1,
    then save again (call this commit 3).

This sometimes happens if commit 2 contained a bug,
and it's important to fix the bug quickly.

4.
The easiest thing to do might be to remove all the changes
introduced by commit 2 to fix the bug,
then figure out how to safely reintroduce the changes later.

At this point, commit 3 is the latest commit,
so if you checkout commit 1,
none of the files will be changed.

--------------------
Checking out an earlier commit will change the state of more than one file.
Checking out an earlier commit will change the state of every file in the repository.

Both are Sometimes True.
Since each commit tracks the state of all files in the repository,
it is possible that checking out an earlier commit will change
the state of multiple files, or even all the files in the repository.

However, it is possible to save a new commit after changing only one file,
so it is possible only one file will change.

----------------------
After checking out a commit,
the state of all the files in the repository will be from the
same point in time.

Always True.
A commit saves a snapshot of all files in the repository
at the time the commit was made, so checking out an earlier
commit will result in all the files being reverted to their state
at the time the commit was made. That is, the files will be in a
consistent state.


===========================
Cloning a new REPOSITORY

New repository introduction
In the rest of this problem set,
you'll be using a new repository to get additional practice
viewing history with Git. The process will be similar to the one you
went through for the asteroids repository in the previous lesson.

The new repository is also a game,
Pappu Pakia, that you can play in your browser, and
like in the lesson, you'll be tracking down some bugs in
the game by looking through its commit history.

As such, don't be surprised if you spot some bugs when you start the game!

Clone the repository
To get started, clone the repository, which is located at the url
https://github.com/udacity/pappu-pakia.git

Then open the file index.htm using your web browser.
On the next screen, select the two creators of the game.
Their names will be displayed on the initial screen when you open the game.



==============================
Identify the bug

Buggy behavior
If you started playing Pappu Pakia,
you should have noticed some pretty strange behavior!

The game seems empty of any obstacles, so it's pretty boring.
Also, the bird (called a "pappu"), seems to flicker in various
locations across the screen.

As you did in the previous lesson,
use Git to checkout commits, run the game, and
figure out which commit introduced the bug.

When deciding where to start,
it may be helpful to know that the bug was introduced recently!
Enter the ID of the buggy commit on the next screen. You can also
enter only the first four or more characters of the commit ID if that
is easier.

In case you forget it and need it again,
here is the ID of the most recent commit in the
repository: fa4c6bade4970c282b3870ad16f1bde8164663a9

My process :
found the obstacles at
git checkout 71d52709ddc4066e7a79a1d0a412e43429a0cdeb

Therefore, the bug was introduced at
547f4171a82ec6429d002c1acef357aec41d3f17

================================
Examining the buggy commit
----------------------------
Use Git's history to figure out what changes were introduced
in the commit that caused the bug.

On the next screen, check any changes that were introduced,
and enter the name of the file that was affected.

Finding and fixing the bug
Now that you know what changes were introduced by the buggy commit,
do you have any idea what could have caused the bug?
If not, don't worry about it.

The answer will be in the solution if you're curious.

Once you've identified the code that caused the bug,
obtain a working version of the game. You can do this by either:

Figuring out what caused the bug (or check the solution),
and modify the code to fix the bug
Checking out the commit before the one with the bug.
That commit won't contain the most up-to-date version of the code,
but for the purposes of the upcoming exercise it won't matter.



========================
There is a second bug
-----------------------
Now you should have a version of the code that works
much better - your pappu is not flickering across the screen,
and there are plenty of obstacles to avoid.

However, there is another, harder to see, bug in the code.

During the game, a cluster of berries appears reasonably often.
When the pappu hits those berries, it should split into three pappu clones,
but instead, nothing seems to happen.

Finding the bug
This time, instead of checking out old versions of the code,
just run git log and look at the 10 most recent commits.
Based only on the commit messages, which commit do you think is most
likely to have introduced this bug?
You can't be sure just by reading the messages,
but pick the one you think is most likely.


Identifying the bug
One reasonable guess is that the commit with message
"speeding clones up", that is, commit 003c8c197cd3b1e5b28b58f53ee14d7ebaa9bb3a,
is likely to be the one causing the bug. The bug is related to clones,
and this commit changed the behavior of clones,
so it seems plausible that this commit caused the bug.

Of course, the most likely-looking commit won't always be the culprit,
so you'll always have to take a closer look at the suspicious commit to see
if it actually caused the bug.
In this case, the commit "speeding up clones" did in fact cause the bug.

Using this strategy of examining the most likely looking commits
doesn't always work, but it often does, and it can save a lot of debugging time.
This is one of the reasons it's so useful to make one commit per logical
change and give each commit a good message - to make it possible to take
shortcuts like this!


=============================
Examining the buggy commit
Again, use Git's history to figure out what
changes were introduced in the commit that caused the bug.
On the next screen, select the change that was introduced,
and enter the name of the file that was affected.

Finding and fixing the bug
Now that you know what changes were introduced by the buggy commit,
do you have any idea what could have caused the bug?
If not, don't worry about it.
The answer will be in the solution if you're curious.

It's not necessary to obtain a working version of the game for future exercises.
However, it can still be nice to verify that you've actually found the bug!
You can do this by either:

Figure out what caused the bug (or check the solution),
and modify the code to fix the bug.
Check out the commit before the one with the bug.
That commit won't contain the most up-to-date version of the code,
but it will let you verify that your hunch was correct.
(Note: this will not work if you modified the code to fix the last bug.)
















|
|
|
|
