<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Example :
Jake and Rachel are editing the same file.
Each alphabet stands for a line of code
Here are what they had by the end of the day.
Jake : B, D, E
Rachel : A, B, C, D

If they were to merge, which line should the final contains ?

A ~> Unknown
B -> YES
C ~> Unknown
D -> YES
E ~> Unknown


B, D are true because both Jake and Rachel contain those same lines.


On the other hand,
A, C, E they can either :
  - Deleted     <~ then should not be included <by Jake A, C, by Rachel E>
  - or Added    <~ then should be included <by Jake E, by Rachel A, C>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<,
Merge Coins into master :

git checkout master
git merge master coins

the commits will be sorted based on the time it is created.

In this case, the coin is not colorful ... WHY?
Git only merges the little changes you make.

And the code added a non-colorful version to the coin.

After merging, we can delete coins label

git branch -d coins
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.

===================================
Side version of Git Diff :
--------------------------
Let's say we want to see the diff of two commits
that are not related to each other:

Since the old commit is not the parent of the new commit,
you will see many changes from its own parent commit.

What if I just want to see the specific changes performed by the commit ?
We need to diff it with its parent.

Using git show ... <~ Show differences between the git committed and its parent
                      without actually knowing who's the parent.




===================================

===================================
Side Note about Merge :
A note about git merge
git merge will also include the currently checked-out branch in the
merged version.
So if you have
- branch1 checked out, and
- you run git
    merge branch2 branch3,

the merged version will
  combine branch1 as well as branch2 and branch3.

That’s because the branch1 label will update
after you make the merge commit,
so it’s unlikely that you didn’t want the changes from branch1
included in the merge.

For this reason, you should always checkout one of the two branches
you’re planning on merging before doing the merge.
Which one you should check out depends on which branch label
you want to point to the new commit.

Since the checked-out branch is
always included in the merge,
you may have guessed that when you are merging two branches,
you don't need to specify both of them as arguments to git merge
on the command line.

If you want to merge branch2 into branch1,
you can simply git checkout branch1 and then type git merge branch2.
The only reason to type git merge branch1 branch2 is
if it helps you keep better mental track of which branches you are merging.

Also, since the two branches are merged,
the order in which they are typed into the command line does not matter.

The key is to remember that git merge always merges all the specified
branches into the currently checked out branch,
creating a new commit for that branch.
====================================
